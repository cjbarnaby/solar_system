$earth_radius: 10px;
$astronomical_unit: 100px;
$time_multiplier: 1s;
$retrograde_orbits: "venus", "uranus";

// distance from sun in astronomical units (1AU = distance from sun to earth)
$distances: (
  "mercury": 0.39,
  "venus": 0.72,
  "earth": 1.00,
  "mars": 1.50,
  "jupiter": 5.20,
  "saturn": 9.50,
  "uranus": 19.20,
  "neptune": 30.10,
  "pluto": 39.50
);

// radius of body (in earth radii)
$radii: (
  "mercury": 0.38,
  "venus": 0.95,
  "earth": 1.00,
  "mars": 0.53,
  "jupiter": 11.00,
  "saturn": 9.00,
  "uranus": 4.00,
  "neptune": 4.00,
  "pluto": 0.18
);

// time taken to complete one revolution around own axis (in earth days)
$rotation_periods: (
  "mercury": 58.80,
  "venus": 244.00,  //note - negative 244, rotation is retrograde
  "earth": 1.00,
  "mars": 1.029,
  "jupiter": 0.411,
  "saturn": 0.428,
  "uranus": 0.748,  //note - negative .748, rotation is retrograde
  "neptune": 0.802,
  "pluto": 0.267
);

// rotations per orbit (in earth days).
$days_per_year: (
  "mercury":87.97,
  "venus":224.7,
  "earth":365,
  "mars":686.98,
  "jupiter":4332.82,
  "saturn":10755.7,
  "uranus":30687.15,
  "neptune":60190.03,
  "pluto":90553.00
);

$colors: (
  "mercury": palegoldenrod,
  "venus": goldenrod,
  "earth": lightblue,
  "mars": darkred,
  "jupiter": orange,
  "saturn": sienna,
  "uranus": aqua,
  "neptune": blue,
  "pluto": grey
);

@each $planet, $period in $rotation_periods {
  .#{$planet} .planet {
    width: (map-get($radii, #{$planet}) * $earth_radius);
    height: (map-get($radii, #{$planet}) * $earth_radius);
    animation: ($period * $time_multiplier) linear infinite if(index($retrograde_orbits, $planet), retrograde_spin, spin);
    transform: translate(-50%, -50%);
    background-color: (map-get($colors, $planet));
  }
}

@each $planet, $days_per_orbit in $days_per_year {
  .#{$planet} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: (map-get($distances, $planet) * $astronomical_unit);
    height: (map-get($distances, $planet) * $astronomical_unit);

    .planet_container {
      height: 100%;
      width: 100%;
      position: absolute;
      animation: ($days_per_orbit * $time_multiplier) linear infinite #{$planet}-orbit;
      top: (map-get($distances, $planet) * $astronomical_unit) / 2;
      @keyframes #{$planet}-orbit {
        from {
          transform: rotate(0deg) translateX((map-get($distances, $planet) * $astronomical_unit) / 2) rotate(0deg);
        } to {
          transform: rotate(360deg) translateX((map-get($distances, $planet) * $astronomical_unit) / 2) rotate(-360deg);
        }
      }
    }
  }
}


body {
  margin: 0;
  padding: 0;
}
.container {
  width: 100vw;
  height: 100vh;
  background-color: black;
  position: relative;
  overflow: hidden;
}

.system {
  background-color: black;
  width: $astronomical_unit * 79;
  height: $astronomical_unit * 79;
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.sun {
  width: 20px;
  height: 20px;
  background-color: white;
  border-radius: 50%;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.line {
  width: 1px;
  height: 50%;
  background-color: black;
  margin: 0 auto;
}

.orbit {
  border: 1px solid rgba(255,255,255,0.2);
  border-radius: 50%;
  position: absolute;
  height: 100%;
  width: 100%;
}

.planet {
  border-radius: 50%;
  position: absolute;
  left: 50%;

}

.mercury .planet {
  background-color: orange;
}

.venus .planet {
  background-color: yellow;
}

.earth .planet {
  background-color: lightblue;
}

.mars .planet {
  background-color: red;
}

.jupiter .planet {
  background-color: orange;
}

.saturn .planet {
  background-color: green;
}

.uranus .planet {
  background-color: teal;
}

.neptune .planet {
  background-color: mediumblue;
}


@keyframes spin {
  from {
    transform: translate(-50%, -50%) rotate(0deg);
  } to {
    transform: translate(-50%, -50%) rotate(360deg);
  }
}

@keyframes retrograde_spin {
  from {
    transform: translate(-50%, -50%) rotate(0deg);
  } to {
    transform: translate(-50%, -50%) rotate(-360deg);
  }
}
