// TODO: SUN'S RADII, ETC, ARE HARDCODED AT THIS POINT (DUE TO SIZE IF DONE RELATIVE TO EARTH RADIUS).

$earth_radius: 20px;
// AU ALTERNATIVES:
  // ACTUAL, RELATIVE TO EARTH RADIANS:
    // $astronomical_unit: $earth_radius * 23481.0;
  // REDUCED BY OVER 2000% FOR DISPLAY PURPOSES:
    $astronomical_unit: 200px;  // distance from sun to earth (AU)
$time_multiplier: 1000ms; // time per earth day
$retrograde_orbits: "venus", "uranus";

$bodies: (
  "sun": (
    "radius": 109.00,          // radius of body (in earth radii).
    "rotation_period": 27.00,  // time taken to complete one revolution around own axis (in earth days)
    "rotation": "prograde"
  ),
  "mercury": (
    "orbits": "sun",
    "distance": 0.39,          // distance from sun in astronomical units (1AU = distance from sun to earth)
    "radius": 0.38,            // radius of body (in earth radii)
    "rotation_period": 58.80,  // time taken to complete one revolution around own axis (in earth days)
    "rotation": "prograde",
    "days_per_year": 87.97,    // days per year in earth days
    "color": gainsboro
  ),
  "venus": (
    "orbits": "sun",
    "distance": 0.72,
    "radius": 0.95,
    "rotation_period": 244.00,   // note - retrograde rotation
    "rotation": "retrograde",
    "days_per_year": 224.70,
    "color": papayawhip
  ),
  "earth": (
    "orbits": "sun",
    "distance": 1.00,
    "radius": 1.00,
    "rotation_period": 1.00,
    "rotation": "prograde",
    "days_per_year": 364.25,
    "color": deepskyblue
  ),
  "mars": (
    "orbits": "sun",
    "distance": 1.50,
    "radius": 0.53,
    "rotation_period": 1.03,
    "rotation": "prograde",
    "days_per_year": 686.98,
    "color": firebrick
  ),
  "jupiter": (
    "orbits": "sun",
    "distance": 5.20,
    "radius": 11.00,
    "rotation_period": 0.411,
    "rotation": "prograde",
    "days_per_year": 4332.82,
    "color": sandybrown
  ),
  "saturn": (
    "orbits": "sun",
    "distance": 9.50,
    "radius": 9.00,
    "rotation_period": 0.428,
    "rotation": "prograde",
    "days_per_year": 10755.70,
    "color": tan
  ),
  "uranus": (
    "orbits": "sun",
    "distance": 19.20,
    "radius": 4.00,
    "rotation_period": 0.748,
    "rotation": "retrograde",    // note: retrograde rotation
    "days_per_year": 30687.15,
    "color": powderblue
  ),
  "neptune": (
    "orbits": "sun",
    "distance": 30.10,
    "radius": 4.00,
    "rotation_period": 0.802,
    "rotation": "prograde",
    "days_per_year": 60190.03,
    "color": royalblue
  ),
  "pluto": (
    "orbits": "sun",
    "distance": 39.50,
    "radius": 0.18,
    "rotation_period": 0.267,
    "rotation": "prograde",
    "days_per_year": 90553.00,
    "color": tan
  )
);

$asteroids: (
  "asteroid_belt": (
    "inner_orbit": "mars",
    "outer_orbit": "jupiter",
    "groups": (
      "slow": (
        "duration": 200
      ),
      "medium": (
        "duration": 100
      ),
      "fast": (
        "duration": 50
      )
    )
  ),
  "kuiper_belt": (
    "inner_orbit": "neptune",
    "outer_orbit": "pluto",
    "groups": (
      "slow": (
        "duration": 200
      ),
      "medium": (
        "duration": 100
      ),
      "fast": (
        "duration": 50
      )
    )
  )
);


@function days_per_orbit($body) {
  // Returns earth days per orbit. Used to calculate orbit animation
  @return map-get(map-get($bodies, $body), "days_per_year") * $time_multiplier;
}

@function orbit_radius($body) {
  // Returns distance from central body in astronomical units.
  @return map-get(map-get($bodies, $body), "distance") * $astronomical_unit;
}

@function body_radius($body) {
  // Returns radius of body in earth radii.
  @return map-get(map-get($bodies, $body), "radius") * $earth_radius;
}

@function color($body) {
  // Background color for body.
  @return map-get(map-get($bodies, $body), "color");
}

@function rotation_period($body) {
  // Returns speed at which body rotates on own axis in seconds.
  @return map-get(map-get($bodies, $body), "rotation_period") * $time_multiplier;
}

@each $body, $data in $bodies {
  .#{$body} {
    @if not map-has-key(map-get($bodies, $body), "orbits") {
      // body is the sun
    } @else if map-get(map-get($bodies, $body), "orbits") == "sun"{
      // body orbits the sun
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: orbit_radius($body);
      height: orbit_radius($body);
      .planet {  // eg .earth .planet
        width: body_radius($body);
        height: body_radius($body);
        animation: rotation_period($body) linear infinite if(index($retrograde_orbits, $body), retrograde_spin, spin);
        transform: translate(-50%, -50%);
        background-color: color($body);
      }
      .planet_container {  //eg .earth .planet_container
        height: 100%;
        width: 100%;
        position: absolute;
        animation: days_per_orbit($body) linear infinite #{$body}-orbit;
        top: orbit_radius($body) / 2;
        @keyframes #{$body}-orbit {
          from {
            transform: rotate(0deg) translateX(orbit_radius($body) / 2) rotate(0deg);
          } to {
            transform: rotate(360deg) translateX(orbit_radius($body) / 2) rotate(-360deg);
          }
        }
      }
      .planet_shadow {   //eg .earth .planet_shadow
        width: body_radius($body);
        height: body_radius($body);
        box-shadow: inset (body_radius($body) / -4) 0px 0px 0px;
        opacity: 0.5;
        animation: days_per_orbit($body) linear infinite #{$body}-shadow;
        @keyframes #{$body}-shadow {
          from {
            transform: translate(-50%, -50%) rotate(0deg);
          } to {
            transform: translate(-50%, -50%) rotate(360deg);
          }
        }
      }
    } @else {
      // body orbits a planet
    }
  }
}

@each $belt, $data in $asteroids {
  .#{$belt} {
    position: absolute;
    top: 100%;
    left: 100%;
    @each $group, $group_data in map-get(map-get($asteroids, $belt), "groups") {
      .#{$group} {
        width: orbit_radius(map-get(map-get($asteroids, $belt), "outer_orbit"));
        height: orbit_radius(map-get(map-get($asteroids, $belt), "outer_orbit"));
        position: absolute;
        transform-origin: top left;
        animation: #{map-get(map-get(map-get(map-get($asteroids, $belt), "groups"), $group), "duration") + "s"} linear infinite spin;
      }
    }
  }
}

body {
  margin: 0;
  padding: 0;
}
.background {
  width: 100vw;
  height: 100vh;
  position: fixed;
  background-color: black;
}

.system {
  width: $astronomical_unit * 79;
  height: $astronomical_unit * 79;
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.sun {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: radial-gradient(#ffd000 1%, #f9b700 39%, #f9b700 39%, #e06317 100%);
  box-shadow: 0 0 12px 2px rgba(255, 70, 0, 0.4), 0 0 40px 20px rgba(255, 107, 0, 0.4), 0 0 20px 50px rgba(255, 203, 0, 0.13);
}
.asteroid {
  position: absolute;
  border-radius: 50%;
  background-color: white;
}
.line {
  width: 1px;
  height: 50%;
  background-color: black;
  margin: 0 auto;
}

.orbit {
  border: 1px solid rgba(255,255,255,0.2);
  border-radius: 50%;
  position: absolute;
  height: 100%;
  width: 100%;
}

.planet,.planet_shadow {
  border-radius: 50%;
  position: absolute;
  left: 50%;
}


@keyframes spin {
  from {
    transform: translate(-50%, -50%) rotate(0deg);
  } to {
    transform: translate(-50%, -50%) rotate(360deg);
  }
}

@keyframes retrograde_spin {
  from {
    transform: translate(-50%, -50%) rotate(0deg);
  } to {
    transform: translate(-50%, -50%) rotate(-360deg);
  }
}
